package router

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/hablof/product-registration/internal/router.TableDownloader -o ./internal\router\table_downloader_mock_test.go -n TableDownloaderMock

import (
	"io"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TableDownloaderMock implements TableDownloader
type TableDownloaderMock struct {
	t minimock.Tester

	funcTable          func(url string) (r1 io.Reader, err error)
	inspectFuncTable   func(url string)
	afterTableCounter  uint64
	beforeTableCounter uint64
	TableMock          mTableDownloaderMockTable
}

// NewTableDownloaderMock returns a mock for TableDownloader
func NewTableDownloaderMock(t minimock.Tester) *TableDownloaderMock {
	m := &TableDownloaderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.TableMock = mTableDownloaderMockTable{mock: m}
	m.TableMock.callArgs = []*TableDownloaderMockTableParams{}

	return m
}

type mTableDownloaderMockTable struct {
	mock               *TableDownloaderMock
	defaultExpectation *TableDownloaderMockTableExpectation
	expectations       []*TableDownloaderMockTableExpectation

	callArgs []*TableDownloaderMockTableParams
	mutex    sync.RWMutex
}

// TableDownloaderMockTableExpectation specifies expectation struct of the TableDownloader.Table
type TableDownloaderMockTableExpectation struct {
	mock    *TableDownloaderMock
	params  *TableDownloaderMockTableParams
	results *TableDownloaderMockTableResults
	Counter uint64
}

// TableDownloaderMockTableParams contains parameters of the TableDownloader.Table
type TableDownloaderMockTableParams struct {
	url string
}

// TableDownloaderMockTableResults contains results of the TableDownloader.Table
type TableDownloaderMockTableResults struct {
	r1  io.Reader
	err error
}

// Expect sets up expected params for TableDownloader.Table
func (mmTable *mTableDownloaderMockTable) Expect(url string) *mTableDownloaderMockTable {
	if mmTable.mock.funcTable != nil {
		mmTable.mock.t.Fatalf("TableDownloaderMock.Table mock is already set by Set")
	}

	if mmTable.defaultExpectation == nil {
		mmTable.defaultExpectation = &TableDownloaderMockTableExpectation{}
	}

	mmTable.defaultExpectation.params = &TableDownloaderMockTableParams{url}
	for _, e := range mmTable.expectations {
		if minimock.Equal(e.params, mmTable.defaultExpectation.params) {
			mmTable.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTable.defaultExpectation.params)
		}
	}

	return mmTable
}

// Inspect accepts an inspector function that has same arguments as the TableDownloader.Table
func (mmTable *mTableDownloaderMockTable) Inspect(f func(url string)) *mTableDownloaderMockTable {
	if mmTable.mock.inspectFuncTable != nil {
		mmTable.mock.t.Fatalf("Inspect function is already set for TableDownloaderMock.Table")
	}

	mmTable.mock.inspectFuncTable = f

	return mmTable
}

// Return sets up results that will be returned by TableDownloader.Table
func (mmTable *mTableDownloaderMockTable) Return(r1 io.Reader, err error) *TableDownloaderMock {
	if mmTable.mock.funcTable != nil {
		mmTable.mock.t.Fatalf("TableDownloaderMock.Table mock is already set by Set")
	}

	if mmTable.defaultExpectation == nil {
		mmTable.defaultExpectation = &TableDownloaderMockTableExpectation{mock: mmTable.mock}
	}
	mmTable.defaultExpectation.results = &TableDownloaderMockTableResults{r1, err}
	return mmTable.mock
}

// Set uses given function f to mock the TableDownloader.Table method
func (mmTable *mTableDownloaderMockTable) Set(f func(url string) (r1 io.Reader, err error)) *TableDownloaderMock {
	if mmTable.defaultExpectation != nil {
		mmTable.mock.t.Fatalf("Default expectation is already set for the TableDownloader.Table method")
	}

	if len(mmTable.expectations) > 0 {
		mmTable.mock.t.Fatalf("Some expectations are already set for the TableDownloader.Table method")
	}

	mmTable.mock.funcTable = f
	return mmTable.mock
}

// When sets expectation for the TableDownloader.Table which will trigger the result defined by the following
// Then helper
func (mmTable *mTableDownloaderMockTable) When(url string) *TableDownloaderMockTableExpectation {
	if mmTable.mock.funcTable != nil {
		mmTable.mock.t.Fatalf("TableDownloaderMock.Table mock is already set by Set")
	}

	expectation := &TableDownloaderMockTableExpectation{
		mock:   mmTable.mock,
		params: &TableDownloaderMockTableParams{url},
	}
	mmTable.expectations = append(mmTable.expectations, expectation)
	return expectation
}

// Then sets up TableDownloader.Table return parameters for the expectation previously defined by the When method
func (e *TableDownloaderMockTableExpectation) Then(r1 io.Reader, err error) *TableDownloaderMock {
	e.results = &TableDownloaderMockTableResults{r1, err}
	return e.mock
}

// Table implements TableDownloader
func (mmTable *TableDownloaderMock) Table(url string) (r1 io.Reader, err error) {
	mm_atomic.AddUint64(&mmTable.beforeTableCounter, 1)
	defer mm_atomic.AddUint64(&mmTable.afterTableCounter, 1)

	if mmTable.inspectFuncTable != nil {
		mmTable.inspectFuncTable(url)
	}

	mm_params := &TableDownloaderMockTableParams{url}

	// Record call args
	mmTable.TableMock.mutex.Lock()
	mmTable.TableMock.callArgs = append(mmTable.TableMock.callArgs, mm_params)
	mmTable.TableMock.mutex.Unlock()

	for _, e := range mmTable.TableMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmTable.TableMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTable.TableMock.defaultExpectation.Counter, 1)
		mm_want := mmTable.TableMock.defaultExpectation.params
		mm_got := TableDownloaderMockTableParams{url}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTable.t.Errorf("TableDownloaderMock.Table got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTable.TableMock.defaultExpectation.results
		if mm_results == nil {
			mmTable.t.Fatal("No results are set for the TableDownloaderMock.Table")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmTable.funcTable != nil {
		return mmTable.funcTable(url)
	}
	mmTable.t.Fatalf("Unexpected call to TableDownloaderMock.Table. %v", url)
	return
}

// TableAfterCounter returns a count of finished TableDownloaderMock.Table invocations
func (mmTable *TableDownloaderMock) TableAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTable.afterTableCounter)
}

// TableBeforeCounter returns a count of TableDownloaderMock.Table invocations
func (mmTable *TableDownloaderMock) TableBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTable.beforeTableCounter)
}

// Calls returns a list of arguments used in each call to TableDownloaderMock.Table.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTable *mTableDownloaderMockTable) Calls() []*TableDownloaderMockTableParams {
	mmTable.mutex.RLock()

	argCopy := make([]*TableDownloaderMockTableParams, len(mmTable.callArgs))
	copy(argCopy, mmTable.callArgs)

	mmTable.mutex.RUnlock()

	return argCopy
}

// MinimockTableDone returns true if the count of the Table invocations corresponds
// the number of defined expectations
func (m *TableDownloaderMock) MinimockTableDone() bool {
	for _, e := range m.TableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TableMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTableCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTable != nil && mm_atomic.LoadUint64(&m.afterTableCounter) < 1 {
		return false
	}
	return true
}

// MinimockTableInspect logs each unmet expectation
func (m *TableDownloaderMock) MinimockTableInspect() {
	for _, e := range m.TableMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TableDownloaderMock.Table with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TableMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTableCounter) < 1 {
		if m.TableMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TableDownloaderMock.Table")
		} else {
			m.t.Errorf("Expected call to TableDownloaderMock.Table with params: %#v", *m.TableMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTable != nil && mm_atomic.LoadUint64(&m.afterTableCounter) < 1 {
		m.t.Error("Expected call to TableDownloaderMock.Table")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TableDownloaderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockTableInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TableDownloaderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TableDownloaderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockTableDone()
}
