package router

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/hablof/merchant-experience/internal/router.Service -o ./internal\router\service_mock_test.go -n ServiceMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/hablof/merchant-experience/internal/models"
	"github.com/hablof/merchant-experience/internal/service"
)

// ServiceMock implements Service
type ServiceMock struct {
	t minimock.Tester

	funcProductsByFilter          func(filter service.RequestFilter) (pa1 []models.Product, err error)
	inspectFuncProductsByFilter   func(filter service.RequestFilter)
	afterProductsByFilterCounter  uint64
	beforeProductsByFilterCounter uint64
	ProductsByFilterMock          mServiceMockProductsByFilter

	funcUpdateProducts          func(sellerId uint64, productUpdates []models.ProductUpdate) (u1 service.UpdateResults, err error)
	inspectFuncUpdateProducts   func(sellerId uint64, productUpdates []models.ProductUpdate)
	afterUpdateProductsCounter  uint64
	beforeUpdateProductsCounter uint64
	UpdateProductsMock          mServiceMockUpdateProducts
}

// NewServiceMock returns a mock for Service
func NewServiceMock(t minimock.Tester) *ServiceMock {
	m := &ServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ProductsByFilterMock = mServiceMockProductsByFilter{mock: m}
	m.ProductsByFilterMock.callArgs = []*ServiceMockProductsByFilterParams{}

	m.UpdateProductsMock = mServiceMockUpdateProducts{mock: m}
	m.UpdateProductsMock.callArgs = []*ServiceMockUpdateProductsParams{}

	return m
}

type mServiceMockProductsByFilter struct {
	mock               *ServiceMock
	defaultExpectation *ServiceMockProductsByFilterExpectation
	expectations       []*ServiceMockProductsByFilterExpectation

	callArgs []*ServiceMockProductsByFilterParams
	mutex    sync.RWMutex
}

// ServiceMockProductsByFilterExpectation specifies expectation struct of the Service.ProductsByFilter
type ServiceMockProductsByFilterExpectation struct {
	mock    *ServiceMock
	params  *ServiceMockProductsByFilterParams
	results *ServiceMockProductsByFilterResults
	Counter uint64
}

// ServiceMockProductsByFilterParams contains parameters of the Service.ProductsByFilter
type ServiceMockProductsByFilterParams struct {
	filter service.RequestFilter
}

// ServiceMockProductsByFilterResults contains results of the Service.ProductsByFilter
type ServiceMockProductsByFilterResults struct {
	pa1 []models.Product
	err error
}

// Expect sets up expected params for Service.ProductsByFilter
func (mmProductsByFilter *mServiceMockProductsByFilter) Expect(filter service.RequestFilter) *mServiceMockProductsByFilter {
	if mmProductsByFilter.mock.funcProductsByFilter != nil {
		mmProductsByFilter.mock.t.Fatalf("ServiceMock.ProductsByFilter mock is already set by Set")
	}

	if mmProductsByFilter.defaultExpectation == nil {
		mmProductsByFilter.defaultExpectation = &ServiceMockProductsByFilterExpectation{}
	}

	mmProductsByFilter.defaultExpectation.params = &ServiceMockProductsByFilterParams{filter}
	for _, e := range mmProductsByFilter.expectations {
		if minimock.Equal(e.params, mmProductsByFilter.defaultExpectation.params) {
			mmProductsByFilter.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmProductsByFilter.defaultExpectation.params)
		}
	}

	return mmProductsByFilter
}

// Inspect accepts an inspector function that has same arguments as the Service.ProductsByFilter
func (mmProductsByFilter *mServiceMockProductsByFilter) Inspect(f func(filter service.RequestFilter)) *mServiceMockProductsByFilter {
	if mmProductsByFilter.mock.inspectFuncProductsByFilter != nil {
		mmProductsByFilter.mock.t.Fatalf("Inspect function is already set for ServiceMock.ProductsByFilter")
	}

	mmProductsByFilter.mock.inspectFuncProductsByFilter = f

	return mmProductsByFilter
}

// Return sets up results that will be returned by Service.ProductsByFilter
func (mmProductsByFilter *mServiceMockProductsByFilter) Return(pa1 []models.Product, err error) *ServiceMock {
	if mmProductsByFilter.mock.funcProductsByFilter != nil {
		mmProductsByFilter.mock.t.Fatalf("ServiceMock.ProductsByFilter mock is already set by Set")
	}

	if mmProductsByFilter.defaultExpectation == nil {
		mmProductsByFilter.defaultExpectation = &ServiceMockProductsByFilterExpectation{mock: mmProductsByFilter.mock}
	}
	mmProductsByFilter.defaultExpectation.results = &ServiceMockProductsByFilterResults{pa1, err}
	return mmProductsByFilter.mock
}

// Set uses given function f to mock the Service.ProductsByFilter method
func (mmProductsByFilter *mServiceMockProductsByFilter) Set(f func(filter service.RequestFilter) (pa1 []models.Product, err error)) *ServiceMock {
	if mmProductsByFilter.defaultExpectation != nil {
		mmProductsByFilter.mock.t.Fatalf("Default expectation is already set for the Service.ProductsByFilter method")
	}

	if len(mmProductsByFilter.expectations) > 0 {
		mmProductsByFilter.mock.t.Fatalf("Some expectations are already set for the Service.ProductsByFilter method")
	}

	mmProductsByFilter.mock.funcProductsByFilter = f
	return mmProductsByFilter.mock
}

// When sets expectation for the Service.ProductsByFilter which will trigger the result defined by the following
// Then helper
func (mmProductsByFilter *mServiceMockProductsByFilter) When(filter service.RequestFilter) *ServiceMockProductsByFilterExpectation {
	if mmProductsByFilter.mock.funcProductsByFilter != nil {
		mmProductsByFilter.mock.t.Fatalf("ServiceMock.ProductsByFilter mock is already set by Set")
	}

	expectation := &ServiceMockProductsByFilterExpectation{
		mock:   mmProductsByFilter.mock,
		params: &ServiceMockProductsByFilterParams{filter},
	}
	mmProductsByFilter.expectations = append(mmProductsByFilter.expectations, expectation)
	return expectation
}

// Then sets up Service.ProductsByFilter return parameters for the expectation previously defined by the When method
func (e *ServiceMockProductsByFilterExpectation) Then(pa1 []models.Product, err error) *ServiceMock {
	e.results = &ServiceMockProductsByFilterResults{pa1, err}
	return e.mock
}

// ProductsByFilter implements Service
func (mmProductsByFilter *ServiceMock) ProductsByFilter(filter service.RequestFilter) (pa1 []models.Product, err error) {
	mm_atomic.AddUint64(&mmProductsByFilter.beforeProductsByFilterCounter, 1)
	defer mm_atomic.AddUint64(&mmProductsByFilter.afterProductsByFilterCounter, 1)

	if mmProductsByFilter.inspectFuncProductsByFilter != nil {
		mmProductsByFilter.inspectFuncProductsByFilter(filter)
	}

	mm_params := &ServiceMockProductsByFilterParams{filter}

	// Record call args
	mmProductsByFilter.ProductsByFilterMock.mutex.Lock()
	mmProductsByFilter.ProductsByFilterMock.callArgs = append(mmProductsByFilter.ProductsByFilterMock.callArgs, mm_params)
	mmProductsByFilter.ProductsByFilterMock.mutex.Unlock()

	for _, e := range mmProductsByFilter.ProductsByFilterMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pa1, e.results.err
		}
	}

	if mmProductsByFilter.ProductsByFilterMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmProductsByFilter.ProductsByFilterMock.defaultExpectation.Counter, 1)
		mm_want := mmProductsByFilter.ProductsByFilterMock.defaultExpectation.params
		mm_got := ServiceMockProductsByFilterParams{filter}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmProductsByFilter.t.Errorf("ServiceMock.ProductsByFilter got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmProductsByFilter.ProductsByFilterMock.defaultExpectation.results
		if mm_results == nil {
			mmProductsByFilter.t.Fatal("No results are set for the ServiceMock.ProductsByFilter")
		}
		return (*mm_results).pa1, (*mm_results).err
	}
	if mmProductsByFilter.funcProductsByFilter != nil {
		return mmProductsByFilter.funcProductsByFilter(filter)
	}
	mmProductsByFilter.t.Fatalf("Unexpected call to ServiceMock.ProductsByFilter. %v", filter)
	return
}

// ProductsByFilterAfterCounter returns a count of finished ServiceMock.ProductsByFilter invocations
func (mmProductsByFilter *ServiceMock) ProductsByFilterAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProductsByFilter.afterProductsByFilterCounter)
}

// ProductsByFilterBeforeCounter returns a count of ServiceMock.ProductsByFilter invocations
func (mmProductsByFilter *ServiceMock) ProductsByFilterBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProductsByFilter.beforeProductsByFilterCounter)
}

// Calls returns a list of arguments used in each call to ServiceMock.ProductsByFilter.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmProductsByFilter *mServiceMockProductsByFilter) Calls() []*ServiceMockProductsByFilterParams {
	mmProductsByFilter.mutex.RLock()

	argCopy := make([]*ServiceMockProductsByFilterParams, len(mmProductsByFilter.callArgs))
	copy(argCopy, mmProductsByFilter.callArgs)

	mmProductsByFilter.mutex.RUnlock()

	return argCopy
}

// MinimockProductsByFilterDone returns true if the count of the ProductsByFilter invocations corresponds
// the number of defined expectations
func (m *ServiceMock) MinimockProductsByFilterDone() bool {
	for _, e := range m.ProductsByFilterMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProductsByFilterMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProductsByFilterCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProductsByFilter != nil && mm_atomic.LoadUint64(&m.afterProductsByFilterCounter) < 1 {
		return false
	}
	return true
}

// MinimockProductsByFilterInspect logs each unmet expectation
func (m *ServiceMock) MinimockProductsByFilterInspect() {
	for _, e := range m.ProductsByFilterMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceMock.ProductsByFilter with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProductsByFilterMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProductsByFilterCounter) < 1 {
		if m.ProductsByFilterMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ServiceMock.ProductsByFilter")
		} else {
			m.t.Errorf("Expected call to ServiceMock.ProductsByFilter with params: %#v", *m.ProductsByFilterMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProductsByFilter != nil && mm_atomic.LoadUint64(&m.afterProductsByFilterCounter) < 1 {
		m.t.Error("Expected call to ServiceMock.ProductsByFilter")
	}
}

type mServiceMockUpdateProducts struct {
	mock               *ServiceMock
	defaultExpectation *ServiceMockUpdateProductsExpectation
	expectations       []*ServiceMockUpdateProductsExpectation

	callArgs []*ServiceMockUpdateProductsParams
	mutex    sync.RWMutex
}

// ServiceMockUpdateProductsExpectation specifies expectation struct of the Service.UpdateProducts
type ServiceMockUpdateProductsExpectation struct {
	mock    *ServiceMock
	params  *ServiceMockUpdateProductsParams
	results *ServiceMockUpdateProductsResults
	Counter uint64
}

// ServiceMockUpdateProductsParams contains parameters of the Service.UpdateProducts
type ServiceMockUpdateProductsParams struct {
	sellerId       uint64
	productUpdates []models.ProductUpdate
}

// ServiceMockUpdateProductsResults contains results of the Service.UpdateProducts
type ServiceMockUpdateProductsResults struct {
	u1  service.UpdateResults
	err error
}

// Expect sets up expected params for Service.UpdateProducts
func (mmUpdateProducts *mServiceMockUpdateProducts) Expect(sellerId uint64, productUpdates []models.ProductUpdate) *mServiceMockUpdateProducts {
	if mmUpdateProducts.mock.funcUpdateProducts != nil {
		mmUpdateProducts.mock.t.Fatalf("ServiceMock.UpdateProducts mock is already set by Set")
	}

	if mmUpdateProducts.defaultExpectation == nil {
		mmUpdateProducts.defaultExpectation = &ServiceMockUpdateProductsExpectation{}
	}

	mmUpdateProducts.defaultExpectation.params = &ServiceMockUpdateProductsParams{sellerId, productUpdates}
	for _, e := range mmUpdateProducts.expectations {
		if minimock.Equal(e.params, mmUpdateProducts.defaultExpectation.params) {
			mmUpdateProducts.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateProducts.defaultExpectation.params)
		}
	}

	return mmUpdateProducts
}

// Inspect accepts an inspector function that has same arguments as the Service.UpdateProducts
func (mmUpdateProducts *mServiceMockUpdateProducts) Inspect(f func(sellerId uint64, productUpdates []models.ProductUpdate)) *mServiceMockUpdateProducts {
	if mmUpdateProducts.mock.inspectFuncUpdateProducts != nil {
		mmUpdateProducts.mock.t.Fatalf("Inspect function is already set for ServiceMock.UpdateProducts")
	}

	mmUpdateProducts.mock.inspectFuncUpdateProducts = f

	return mmUpdateProducts
}

// Return sets up results that will be returned by Service.UpdateProducts
func (mmUpdateProducts *mServiceMockUpdateProducts) Return(u1 service.UpdateResults, err error) *ServiceMock {
	if mmUpdateProducts.mock.funcUpdateProducts != nil {
		mmUpdateProducts.mock.t.Fatalf("ServiceMock.UpdateProducts mock is already set by Set")
	}

	if mmUpdateProducts.defaultExpectation == nil {
		mmUpdateProducts.defaultExpectation = &ServiceMockUpdateProductsExpectation{mock: mmUpdateProducts.mock}
	}
	mmUpdateProducts.defaultExpectation.results = &ServiceMockUpdateProductsResults{u1, err}
	return mmUpdateProducts.mock
}

// Set uses given function f to mock the Service.UpdateProducts method
func (mmUpdateProducts *mServiceMockUpdateProducts) Set(f func(sellerId uint64, productUpdates []models.ProductUpdate) (u1 service.UpdateResults, err error)) *ServiceMock {
	if mmUpdateProducts.defaultExpectation != nil {
		mmUpdateProducts.mock.t.Fatalf("Default expectation is already set for the Service.UpdateProducts method")
	}

	if len(mmUpdateProducts.expectations) > 0 {
		mmUpdateProducts.mock.t.Fatalf("Some expectations are already set for the Service.UpdateProducts method")
	}

	mmUpdateProducts.mock.funcUpdateProducts = f
	return mmUpdateProducts.mock
}

// When sets expectation for the Service.UpdateProducts which will trigger the result defined by the following
// Then helper
func (mmUpdateProducts *mServiceMockUpdateProducts) When(sellerId uint64, productUpdates []models.ProductUpdate) *ServiceMockUpdateProductsExpectation {
	if mmUpdateProducts.mock.funcUpdateProducts != nil {
		mmUpdateProducts.mock.t.Fatalf("ServiceMock.UpdateProducts mock is already set by Set")
	}

	expectation := &ServiceMockUpdateProductsExpectation{
		mock:   mmUpdateProducts.mock,
		params: &ServiceMockUpdateProductsParams{sellerId, productUpdates},
	}
	mmUpdateProducts.expectations = append(mmUpdateProducts.expectations, expectation)
	return expectation
}

// Then sets up Service.UpdateProducts return parameters for the expectation previously defined by the When method
func (e *ServiceMockUpdateProductsExpectation) Then(u1 service.UpdateResults, err error) *ServiceMock {
	e.results = &ServiceMockUpdateProductsResults{u1, err}
	return e.mock
}

// UpdateProducts implements Service
func (mmUpdateProducts *ServiceMock) UpdateProducts(sellerId uint64, productUpdates []models.ProductUpdate) (u1 service.UpdateResults, err error) {
	mm_atomic.AddUint64(&mmUpdateProducts.beforeUpdateProductsCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateProducts.afterUpdateProductsCounter, 1)

	if mmUpdateProducts.inspectFuncUpdateProducts != nil {
		mmUpdateProducts.inspectFuncUpdateProducts(sellerId, productUpdates)
	}

	mm_params := &ServiceMockUpdateProductsParams{sellerId, productUpdates}

	// Record call args
	mmUpdateProducts.UpdateProductsMock.mutex.Lock()
	mmUpdateProducts.UpdateProductsMock.callArgs = append(mmUpdateProducts.UpdateProductsMock.callArgs, mm_params)
	mmUpdateProducts.UpdateProductsMock.mutex.Unlock()

	for _, e := range mmUpdateProducts.UpdateProductsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmUpdateProducts.UpdateProductsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateProducts.UpdateProductsMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateProducts.UpdateProductsMock.defaultExpectation.params
		mm_got := ServiceMockUpdateProductsParams{sellerId, productUpdates}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateProducts.t.Errorf("ServiceMock.UpdateProducts got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateProducts.UpdateProductsMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateProducts.t.Fatal("No results are set for the ServiceMock.UpdateProducts")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmUpdateProducts.funcUpdateProducts != nil {
		return mmUpdateProducts.funcUpdateProducts(sellerId, productUpdates)
	}
	mmUpdateProducts.t.Fatalf("Unexpected call to ServiceMock.UpdateProducts. %v %v", sellerId, productUpdates)
	return
}

// UpdateProductsAfterCounter returns a count of finished ServiceMock.UpdateProducts invocations
func (mmUpdateProducts *ServiceMock) UpdateProductsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateProducts.afterUpdateProductsCounter)
}

// UpdateProductsBeforeCounter returns a count of ServiceMock.UpdateProducts invocations
func (mmUpdateProducts *ServiceMock) UpdateProductsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateProducts.beforeUpdateProductsCounter)
}

// Calls returns a list of arguments used in each call to ServiceMock.UpdateProducts.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateProducts *mServiceMockUpdateProducts) Calls() []*ServiceMockUpdateProductsParams {
	mmUpdateProducts.mutex.RLock()

	argCopy := make([]*ServiceMockUpdateProductsParams, len(mmUpdateProducts.callArgs))
	copy(argCopy, mmUpdateProducts.callArgs)

	mmUpdateProducts.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateProductsDone returns true if the count of the UpdateProducts invocations corresponds
// the number of defined expectations
func (m *ServiceMock) MinimockUpdateProductsDone() bool {
	for _, e := range m.UpdateProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateProductsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateProductsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateProducts != nil && mm_atomic.LoadUint64(&m.afterUpdateProductsCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateProductsInspect logs each unmet expectation
func (m *ServiceMock) MinimockUpdateProductsInspect() {
	for _, e := range m.UpdateProductsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceMock.UpdateProducts with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateProductsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateProductsCounter) < 1 {
		if m.UpdateProductsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ServiceMock.UpdateProducts")
		} else {
			m.t.Errorf("Expected call to ServiceMock.UpdateProducts with params: %#v", *m.UpdateProductsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateProducts != nil && mm_atomic.LoadUint64(&m.afterUpdateProductsCounter) < 1 {
		m.t.Error("Expected call to ServiceMock.UpdateProducts")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockProductsByFilterInspect()

		m.MinimockUpdateProductsInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockProductsByFilterDone() &&
		m.MinimockUpdateProductsDone()
}
